{
  "name": "shallow-clone",
  "description": "Make a shallow clone of an object, array or primitive.",
  "version": "1.0.0",
  "homepage": "https://github.com/jonschlinkert/shallow-clone",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://twitter.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "http://twitter.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "jonschlinkert/shallow-clone"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/shallow-clone/issues"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "is-extendable": "^0.1.1",
    "kind-of": "^5.0.0",
    "mixin-object": "^2.0.1"
  },
  "devDependencies": {
    "gulp-format-md": "^1.0.0",
    "mocha": "^3.4.2",
    "should": "^11.2.1"
  },
  "keywords": [
    "array",
    "clone",
    "copy",
    "extend",
    "mixin",
    "object",
    "primitive",
    "shallow"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "assign-deep",
        "clone-deep",
        "extend-shallow",
        "is-plain-object",
        "isobject",
        "kind-of",
        "mixin-deep",
        "mixin-object"
      ]
    },
    "lint": {
      "reflinks": true
    }
  },
  "readme": "# shallow-clone [![NPM version](https://img.shields.io/npm/v/shallow-clone.svg?style=flat)](https://www.npmjs.com/package/shallow-clone) [![NPM monthly downloads](https://img.shields.io/npm/dm/shallow-clone.svg?style=flat)](https://npmjs.org/package/shallow-clone) [![NPM total downloads](https://img.shields.io/npm/dt/shallow-clone.svg?style=flat)](https://npmjs.org/package/shallow-clone) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/shallow-clone.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/shallow-clone)\n\n> Make a shallow clone of an object, array or primitive.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save shallow-clone\n```\n\n## Usage\n\n```js\nvar clone = require('shallow-clone');\n```\n\n## shallow clones arrays\n\nThe array itself is cloned, but not the elements of the array. So any objects in the array will still not be cloned (e.g. they will be the same object as in the orginal array).\n\n```js\nvar arr = [{ 'a': 0 }, { 'b': 1 }]\nvar foo = clone(arr);\n// foo =>  [{ 'a': 0 }, { 'b': 1 }]\n\n// array is cloned\nassert.equal(actual === expected, false);\n\n// array elements are not\nassert.deepEqual(actual[0], expected[0]); // true\n```\n\n## returns primitives as-is\n\n```js\nclone(0)\n//=> 0\n\nclone('foo')\n//=> 'foo'\n```\n\n## shallow clone a regex\n\n```js\nclone(/foo/g)\n//=> /foo/g\n```\n\n## shallow clone an object\n\n```js\nclone({a: 1, b: 2, c: 3 })\n//=> {a: 1, b: 2, c: 3 }\n```\n\n## About\n\n### Related projects\n\n* [assign-deep](https://www.npmjs.com/package/assign-deep): Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target… [more](https://github.com/jonschlinkert/assign-deep) | [homepage](https://github.com/jonschlinkert/assign-deep \"Deeply assign the enumerable properties and/or es6 Symbol properies of source objects to the target (first) object.\")\n* [clone-deep](https://www.npmjs.com/package/clone-deep): Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives. | [homepage](https://github.com/jonschlinkert/clone-deep \"Recursively (deep) clone JavaScript native types, like Object, Array, RegExp, Date as well as primitives.\")\n* [extend-shallow](https://www.npmjs.com/package/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util. | [homepage](https://github.com/jonschlinkert/extend-shallow \"Extend an object with the properties of additional objects. node.js/javascript util.\")\n* [is-plain-object](https://www.npmjs.com/package/is-plain-object): Returns true if an object was created by the `Object` constructor. | [homepage](https://github.com/jonschlinkert/is-plain-object \"Returns true if an object was created by the `Object` constructor.\")\n* [isobject](https://www.npmjs.com/package/isobject): Returns true if the value is an object and not an array or null. | [homepage](https://github.com/jonschlinkert/isobject \"Returns true if the value is an object and not an array or null.\")\n* [kind-of](https://www.npmjs.com/package/kind-of): Get the native type of a value. | [homepage](https://github.com/jonschlinkert/kind-of \"Get the native type of a value.\")\n* [mixin-deep](https://www.npmjs.com/package/mixin-deep): Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone. | [homepage](https://github.com/jonschlinkert/mixin-deep \"Deeply mix the properties of objects into the first object. Like merge-deep, but doesn't clone.\")\n* [mixin-object](https://www.npmjs.com/package/mixin-object): Mixin the own and inherited properties of other objects onto the first object. Pass an… [more](https://github.com/jonschlinkert/mixin-object) | [homepage](https://github.com/jonschlinkert/mixin-object \"Mixin the own and inherited properties of other objects onto the first object. Pass an empty object as the first arg to shallow clone.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 2 | [doowb](https://github.com/doowb) |\n| 2 | [jonschlinkert](https://github.com/jonschlinkert) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on July 16, 2017._",
  "readmeFilename": "README.md",
  "_id": "shallow-clone@1.0.0",
  "dist": {
    "shasum": "10720963fcddcdcaa99daf040c89f9bcc9d23120"
  },
  "_from": "shallow-clone@^1.0.0",
  "_resolved": "https://registry.npmjs.org/shallow-clone/-/shallow-clone-1.0.0.tgz"
}
