{
  "name": "prompt-choices",
  "description": "Create an array of multiple choice objects for use in prompts.",
  "version": "4.0.5",
  "homepage": "https://github.com/enquirer/prompt-choices",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "enquirer/prompt-choices"
  },
  "bugs": {
    "url": "https://github.com/enquirer/prompt-choices/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=4.0.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "arr-flatten": "^1.1.0",
    "arr-swap": "^1.0.1",
    "choices-separator": "^2.0.0",
    "clone-deep": "^1.0.0",
    "collection-visit": "^1.0.0",
    "debug": "^3.0.1",
    "define-property": "^1.0.0",
    "extend-shallow": "^2.0.1",
    "is-number": "^3.0.0",
    "kind-of": "^5.0.2",
    "koalas": "^1.0.2",
    "lazy-cache": "^2.0.2",
    "log-utils": "^0.2.1",
    "pointer-symbol": "^1.0.0",
    "radio-symbol": "^2.0.0",
    "set-value": "^2.0.0",
    "strip-color": "^0.1.0",
    "terminal-paginator": "^2.0.2",
    "toggle-array": "^1.0.1"
  },
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-eslint": "^4.0.0",
    "gulp-format-md": "^1.0.0",
    "gulp-istanbul": "^1.1.2",
    "gulp-mocha": "^3.0.1",
    "gulp-unused": "^0.2.1",
    "is-windows": "^1.0.1",
    "mocha": "^3.5.0",
    "prompt-actions": "^3.0.2"
  },
  "keywords": [
    "answer",
    "answers",
    "ask",
    "checkbox",
    "choice",
    "choices",
    "cli",
    "command",
    "enquirer",
    "enquirerprompt",
    "input",
    "inquire",
    "inquirer",
    "interact",
    "list",
    "menu",
    "password",
    "prompt",
    "prompts",
    "question",
    "readline",
    "stdin",
    "stdout",
    "terminal",
    "tty",
    "ui"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    },
    "related": {
      "list": [
        "enquirer",
        "prompt-base",
        "prompt-checkbox",
        "prompt-question",
        "prompt-radio"
      ]
    },
    "reflinks": [
      "choices-separator"
    ]
  },
  "readme": "# prompt-choices [![NPM version](https://img.shields.io/npm/v/prompt-choices.svg?style=flat)](https://www.npmjs.com/package/prompt-choices) [![NPM monthly downloads](https://img.shields.io/npm/dm/prompt-choices.svg?style=flat)](https://npmjs.org/package/prompt-choices) [![NPM total downloads](https://img.shields.io/npm/dt/prompt-choices.svg?style=flat)](https://npmjs.org/package/prompt-choices) [![Linux Build Status](https://img.shields.io/travis/enquirer/prompt-choices.svg?style=flat&label=Travis)](https://travis-ci.org/enquirer/prompt-choices)\n\n> Create an array of multiple choice objects for use in prompts.\n\nFollow this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), for updates on this project and others.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save prompt-choices\n```\n\n## Usage\n\n```js\nvar Choices = require('prompt-choices');\nvar choices = new Choices(['foo', 'bar', 'baz']);\n```\n\n## API\n\n### [Choices](index.js#L22)\n\nCreate a new `Choices` collection.\n\n**Params**\n\n* `choices` **{Array}**: One or more `choice` strings or objects.\n\n**Example**\n\n```js\nvar choices = new Choices(['foo', 'bar', 'baz']);\nvar choices = new Choices([{name: 'foo'}, {name: 'bar'}, {name: 'baz'}]);\n```\n\n### [.render](index.js#L54)\n\nRender choices.\n\n**Params**\n\n* `position` **{Number}**: Cursor position\n* `options` **{Object}**\n* `returns` **{String}**\n\n### [.choice](index.js#L82)\n\nCreate a new `Choice` object.\n\n**Params**\n\n* `val` **{String|Object}**\n* `returns` **{Object}**: Returns a choice object.\n\n**Example**\n\n```js\nchoices.choice('blue');\n```\n\n### [.toChoice](index.js#L100)\n\nReturns a normalized `choice` object.\n\n**Params**\n\n* `choice` **{Object|String}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\nchoices.toChoice('foo');\nchoices.toChoice({name: 'foo'});\n```\n\n### [.addChoice](index.js#L120)\n\nAdd a normalized `choice` object to the `choices` array.\n\n**Params**\n\n* `choice` **{string|Object}**: One or more choices to add.\n\n**Example**\n\n```js\nchoices.addChoice(['foo', 'bar', 'baz']);\n```\n\n### [.addChoices](index.js#L150)\n\nAdd an array of normalized `choice` objects to the `choices` array. This method is called in the constructor, but it can also be used to add choices after instantiation.\n\n**Params**\n\n* `choices` **{Array|Object}**: One or more choices to add.\n\n**Example**\n\n```js\nchoices.addChoices(['foo', 'bar', 'baz']);\n```\n\n### [.toGroups](index.js#L183)\n\nCreate choice \"groups\" from the given choices object. ![choice groups](docs/prompt-groups.gif).\n\n**Params**\n\n* `choices` **{Object}**: (required) The value of each object must be an array of choices (strings or objects).\n* `returns` **{Array}**: Returns an array of normalized choice objects.\n\n**Example**\n\n```js\nchoices.toGroups({\n  foo: ['a', 'b', 'c'],\n  bar: ['d', 'e', 'f']\n});\n```\n\n### [.separator](index.js#L259)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `separator` **{String}**: Optionally pass a string to use as the separator.\n* `returns` **{Object}**: Returns a separator object.\n\n**Example**\n\n```js\nchoices.separator();\n```\n\n### [.hasChoice](index.js#L275)\n\nReturns true if a choice exists.\n\n**Params**\n\n* `val` **{Number}**: The index or key of the choice to check for.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nchoices.hasChoice(1);\nchoices.hasChoice('foo');\n```\n\n### [.getChoice](index.js#L291)\n\nGet a non-separator choice from the collection.\n\n**Params**\n\n* `idx` **{Number}**: The selected choice index\n* `returns` **{Object|undefined}**: Return the matched choice object or undefined\n\n**Example**\n\n```js\nchoices.getChoice(1);\nchoices.getChoice('foo');\n```\n\n### [.getIndex](index.js#L318)\n\nGet the index of a non-separator choice from the collection.\n\n**Params**\n\n* `key` **{String}**: The key of the choice to get\n* `returns` **{Number}**: Index of the choice or `-1`;\n\n**Example**\n\n```js\nvar choices = new Choices(['foo', 'bar', 'baz']);\nconsole.log(choices.getIndex('foo')); //=> 0\nconsole.log(choices.getIndex('baz')); //=> 2\nconsole.log(choices.getIndex('bar')); //=> 1\nconsole.log(choices.getIndex('qux')); //=> -1\n```\n\n### [.get](index.js#L342)\n\nGet the choice at the specified index.\n\n**Params**\n\n* `key` **{Number|String}**: The name or index of the object to get\n* `returns` **{Object}**: Returns the specified choice\n\n**Example**\n\n```js\nvar choice = choices.get(1);\n//=> {name: 'foo'}\nvar choice = choices.get(1, 'name');\n//=> 'foo'\n```\n\n### [.clear](index.js#L366)\n\nClear all choices from the instance. This is useful when you need to update the indices of choices without re-instantiating.\n\n**Example**\n\n```js\nchoices.clear();\n```\n\n### [.key](index.js#L380)\n\nReturn the `.key` property from the choice at the given index.\n\n**Params**\n\n* `key` **{String}**: Property name to use for plucking objects.\n* `returns` **{Array}**: Plucked objects\n\n### [.check](index.js#L394)\n\nCheck the choice at the given `idx`.\n\n**Params**\n\n* `val` **{Number|Array}**: The key(s) or index(s) of the choice(s) to check.\n\n**Example**\n\n```js\nchoices.check(1);\n```\n\n### [.uncheck](index.js#L419)\n\nDisable the choice at the given `idx`.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to enable.\n\n**Example**\n\n```js\nchoices.uncheck(1);\n```\n\n### [.isChecked](index.js#L450)\n\nReturns true if a choice is checked.\n\n**Params**\n\n* `name` **{String|Number}**: Name or index of the choice.\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar choices = new Choices(['foo', 'bar', 'baz']);\nconsole.log(choices.isChecked('foo'));\n//=> false\nchoices.check('foo');\nconsole.log(choices.isChecked('foo'));\n//=> true\n```\n\n### [.toggle](index.js#L478)\n\nToggle the choice at the given `idx`.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to toggle.\n\n**Example**\n\n```js\nchoices.toggle(1);\n// radio mode\nchoices.toggle(1, true);\n```\n\n### [.swap](index.js#L586)\n\nSwap two choices in the choices array.\n\n**Params**\n\n* `a` **{String|Number}**\n* `b` **{String|Number}**\n* `returns` **{Object}**: Returns the `Choices` instance\n\n### [.where](index.js#L602)\n\nReturn choice values for choices that return truthy based\non the given `val`.\n\n**Params**\n\n* `val` **{Array|Object|Function|String|RegExp}**\n* `returns` **{Array}**: Matching choices or empty array\n\n### [.isItem](index.js#L650)\n\nReturns true if the given `choice` is a valid choice item, and\nnot a \"group\" or \"radio\" choice.\n\n**Params**\n\n* `key` **{String}**: Property name to use for plucking objects.\n* `returns` **{Array}**: Plucked objects\n\n### [.isValidIndex](index.js#L665)\n\nReturns true if the given `index` is a valid choice index.\n\n**Params**\n\n* `key` **{String}**: Property name to use for plucking objects.\n* `returns` **{Array}**: Plucked objects\n\n### [.pluck](index.js#L676)\n\nPluck an object with the specified key from the choices collection.\n\n**Params**\n\n* `key` **{String}**: Property name to use for plucking objects.\n* `returns` **{Array}**: Plucked objects\n\n### [.default](index.js#L712)\n\nGetter for getting the default choice.\n\n### [.checked](index.js#L743)\n\nGetter for getting the checked choices from the collection.\n\n### [.length](index.js#L785)\n\nGetter for getting the length of the collection.\n\n### [.Separator](index.js#L805)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `separator` **{String}**: Optionally pass a string to use as the separator.\n* `returns` **{Object}**: Returns a separator object.\n\n**Example**\n\n```js\nnew Choices.Separator();\n```\n\n### [.isChoices](index.js#L821)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `choices` **{String}**: The value to test.\n* `returns` **{Boolean}**: Returns true if the given value is an instance of `Choices`.\n\n**Example**\n\n```js\nvar Choices = require('prompt-choices');\nvar choices = new Choices(['foo']);\nconsole.log(Choices.isChoices(choices)); //=> true\nconsole.log(Choices.isChoices({})); //=> false\n```\n\n### [.isChoice](index.js#L840)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `choice` **{String}**: The value to test.\n* `returns` **{Boolean}**: Returns true if the given value is an instance of `Choice`.\n\n**Example**\n\n```js\nvar Choices = require('prompt-choices');\nvar choices = new Choices(['foo']);\nvar foo = choices.getChoice('foo');\nconsole.log(Choices.isChoice(foo)); //=> true\nconsole.log(Choices.isChoice({})); //=> false\n```\n\n## Release history\n\n### v3.0.2\n\n**Added**\n\n* adds array support to `.isChecked`\n\n**Fixed**\n\n* ensures that choice groups are checked/unchecked based on group items\n\n### v3.0.0\n\n**Added**\n\n* adds support for choice \"groups\"! This allows you to define an object of choice arrays, where each key in the object creates a choice group.\n\n### v2.0.0\n\n**Changed**\n\n* renamed `Move` class to `Actions`\n* renamed `choices.move` property to `choices.actions`\n\n**Removed**\n\n* removed `.enable` and `.disable` prototype methods from both `Choice` and `Choices`. These methods were ambiguous as they blurred the distinction between \"enabling\" a choice (meaning that it's \"checked\") versus enabling a property on a choice. If this is confusing, that's why they were removed.\n\n**Added**\n\n* adds `Actions` class (previously named `Move`) for managing actions on choices\n* adds `.addChoice` prototype method, for adding a single choice after instantiation\n* adds `.action` prototype method to `Choices`, which calls a method on the `Actions` class\n* adds `.check` and `.uncheck` prototype methods (previously ambiguously named `.enable` and `.disable`)\n\n## Attribution\n\nSome of the code in this library was initially based on the `Choices` class in Inquirer.\n\n## About\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [enquirer](https://www.npmjs.com/package/enquirer): Intuitive, plugin-based prompt system for node.js. | [homepage](http://enquirer.io \"Intuitive, plugin-based prompt system for node.js.\")\n* [prompt-base](https://www.npmjs.com/package/prompt-base): Base prompt module used for creating custom prompts. | [homepage](https://github.com/enquirer/prompt-base \"Base prompt module used for creating custom prompts.\")\n* [prompt-checkbox](https://www.npmjs.com/package/prompt-checkbox): Multiple-choice/checkbox prompt. Can be used standalone or with a prompt system like [Enquirer]. | [homepage](https://github.com/enquirer/prompt-checkbox \"Multiple-choice/checkbox prompt. Can be used standalone or with a prompt system like [Enquirer].\")\n* [prompt-question](https://www.npmjs.com/package/prompt-question): Question object, used by Enquirer and prompt plugins. | [homepage](https://github.com/enquirer/prompt-question \"Question object, used by Enquirer and prompt plugins.\")\n* [prompt-radio](https://www.npmjs.com/package/prompt-radio): Radio prompt. Can be used as a standalone prompt, or as a plugin for [Enquirer]. | [homepage](https://github.com/enquirer/prompt-radio \"Radio prompt. Can be used as a standalone prompt, or as a plugin for [Enquirer].\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on August 28, 2017._",
  "readmeFilename": "README.md",
  "_id": "prompt-choices@4.0.5",
  "dist": {
    "shasum": "5ac1dd86d475b60150685f90ff8d99ec44d80e99"
  },
  "_from": "prompt-choices@^4.0.5",
  "_resolved": "https://registry.npmjs.org/prompt-choices/-/prompt-choices-4.0.5.tgz"
}
