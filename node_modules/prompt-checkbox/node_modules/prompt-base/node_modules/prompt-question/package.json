{
  "name": "prompt-question",
  "description": "Question object, used by Enquirer and prompt plugins.",
  "version": "5.0.2",
  "homepage": "https://github.com/enquirer/prompt-question",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "enquirer/prompt-question"
  },
  "bugs": {
    "url": "https://github.com/enquirer/prompt-question/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=4.0.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "clone-deep": "^1.0.0",
    "debug": "^3.0.1",
    "define-property": "^1.0.0",
    "isobject": "^3.0.1",
    "kind-of": "^5.0.2",
    "koalas": "^1.0.2",
    "prompt-choices": "^4.0.5"
  },
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-eslint": "^4.0.0",
    "gulp-format-md": "^1.0.0",
    "gulp-istanbul": "^1.1.2",
    "gulp-mocha": "^3.0.1",
    "gulp-unused": "^0.2.1",
    "mocha": "^3.5.0"
  },
  "keywords": [
    "answer",
    "answers",
    "ask",
    "bar",
    "bottom",
    "checkbox",
    "choice",
    "cli",
    "command",
    "enquirer",
    "input",
    "inquire",
    "inquirer",
    "interact",
    "list",
    "menu",
    "password",
    "prompt",
    "prompts",
    "question",
    "readline",
    "stdin",
    "stdout",
    "terminal",
    "tty",
    "ui"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "choices-separator",
        "enquirer",
        "prompt-choices",
        "readline-utils"
      ]
    },
    "reflinks": [
      "base-prompt",
      "prompt-choices"
    ],
    "lint": {
      "reflinks": true
    }
  },
  "readme": "# prompt-question [![NPM version](https://img.shields.io/npm/v/prompt-question.svg?style=flat)](https://www.npmjs.com/package/prompt-question) [![NPM monthly downloads](https://img.shields.io/npm/dm/prompt-question.svg?style=flat)](https://npmjs.org/package/prompt-question) [![NPM total downloads](https://img.shields.io/npm/dt/prompt-question.svg?style=flat)](https://npmjs.org/package/prompt-question) [![Linux Build Status](https://img.shields.io/travis/enquirer/prompt-question.svg?style=flat&label=Travis)](https://travis-ci.org/enquirer/prompt-question)\n\n> Question object, used by Enquirer and prompt plugins.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save prompt-question\n```\n\n## Usage\n\nThe main export is a constructor function that is used to create new `Question` objects, which are used in prompts by [base-prompt][].\n\n```js\nvar Question = require('prompt-question');\nvar question = new Question('color', 'What is favorite color?');\n```\n\n**Examples**\n\nAny of the following signatures may be used:\n\n```js\nvar question = new Question('color'); // sets message as the same value as `name`\nvar question = new Question('color', 'What is favorite color?');\nvar question = new Question('color', {message: 'What is favorite color?'});\nvar question = new Question({name: 'color', message: 'What is favorite color?'});\nvar question = new Question({name: 'color'});\n```\n\n## API\n\n### [Question](index.js#L29)\n\nCreate a new question with the given `name`, `message` and `options`.\n\n**Params**\n\n* `name` **{String|Object}**: Question name or options.\n* `message` **{String|Object}**: Question message or options.\n* `options` **{String|Object}**: Question options.\n\n**Example**\n\n```js\nvar question = new Question('first', 'What is your first name?');\nconsole.log(question);\n// {\n//   type: 'input',\n//   name: 'color',\n//   message: 'What is your favorite color?'\n// }\n```\n\n### [.clone](index.js#L71)\n\nClone the question instance.\n\n* `returns` **{Object}**: Returns the cloned question\n\n**Example**\n\n```js\nvar clonedQuestion = question.clone();\n```\n\n### [.addChoices](index.js#L95)\n\nAdd formatted choice objects to the `question.choices` array. See [prompt-choices](https://github.com/enquirer/prompt-choices) for more details.\n\n**Params**\n\n* `choices` **{String|Array}**: One or more choices to add.\n* `returns` **{Object}**: Returns the question instance for chaining\n\n**Example**\n\n```js\nquestion.addChoices(['foo', 'bar', 'baz']);\n```\n\n### [.addChoice](index.js#L112)\n\nAdd a choice to `question.choices` array. See [prompt-choices](https://github.com/enquirer/prompt-choices) for more details.\n\n**Params**\n\n* `choice` **{String|Object}**\n* `returns` **{Object}**: Returns the question instance for chaining\n\n**Example**\n\n```js\nquestion.addChoice('foo');\n```\n\n### [.getDefault](index.js#L142)\n\nReturns the given `val` or `question.default` if `val` is undefined or null.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{any}**\n\n**Example**\n\n```js\nvar question = new Question({\n  name: 'first',\n  message: 'First name'?,\n  default: 'Bob'\n});\n\nconsole.log(question.getAnswer());\n//=> 'Bob'\nconsole.log(question.getAnswer('Joe'));\n//=> 'Joe'\nconsole.log(question.getAnswer(false));\n//=> false\nconsole.log(question.getAnswer(0));\n//=> 0\n```\n\n### [.getChoice](index.js#L186)\n\nGet the given choice from `questions.choices`.\n\n**Params**\n\n* `val` **{any}**\n* `returns` **{any}**\n\n**Example**\n\n```js\nvar Question = require('prompt-question');\nvar question = new Question('color', 'What is your favorite color?', {\n  choices: ['red', 'blue', 'yellow']\n});\nconsole.log(question.getChoice('red'));\n//=> Choice { name: 'red', short: 'red', value: 'red', checked: false }\n```\n\n### [.separator](index.js#L195)\n\nCreate a separator using [choices-separator](https://github.com/enquirer/choices-separator).\n\n### [.hasDefault](index.js#L207)\n\nGetter that returns true if a `default` value has been defined.\n\n* `returns` **{Boolean}**: True if a default value is defined.\n\n### [.checkbox](index.js#L229)\n\nGetter/setter for the checkbox symbols to use.\n\n* `returns` **{Object}**: Checkbox object with `.on`, `.off` and `.disabled` properties.\n\n**Example**\n\n```js\nvar question = new Question({\n  name: 'foo',\n  checkbox: {off: '[ ]', on: '[x]', disabled: 'X'}\n});\n// or\nquestion.checkbox = {off: '[ ]', on: '[x]', disabled: 'X'};\n```\n\n### [.choices](index.js#L253)\n\nGetter/setter for getting and setting choices (if applicable).\n\n* `returns` **{Object}**: Returns an instance of [prompt-choices](https://github.com/enquirer/prompt-choices)\n\n**Example**\n\n```js\nvar question = new Question();\nquestion.choices = ['a', 'b', 'c'];\n```\n\n### [.Question.isQuestion](index.js#L288)\n\nStatic method that returns true if `question` is a valid question object.\n\n**Params**\n\n* `question` **{Object}**\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nconsole.log(Question.isQuestion('foo'));\n//=> false\nconsole.log(Question.isQuestion(new Question('What is your name?')));\n//=> true\n```\n\n### [.Question.choices](index.js#L305)\n\nStatic method for creating a new `Choices` object. See [prompt-choices](https://github.com/enquirer/prompt-choices) for more details.\n\n**Params**\n\n* `choices` **{Array}**: Array of choices\n* `returns` **{Object}**: Returns an intance of Choices.\n\n**Example**\n\n```js\nvar choices = new Question.Choices(['foo', 'bar', 'baz']);\n```\n\n### [.Question.Separator](index.js#L320)\n\nStatic method for creating a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `separator` **{String}**: Optionally pass a string to use as the separator.\n* `returns` **{Object}**: Returns a separator object.\n\n**Example**\n\n```js\nnew Question.Separator();\n```\n\n## Release history\n\n### v5.0.0\n\n* Support `.choices` as a function\n\n### v4.0.0\n\n* bumps [prompt-choices](https://github.com/enquirer/prompt-choices)\n\n### v3.0.0\n\n* bumps [prompt-choices](https://github.com/enquirer/prompt-choices)\n\n### v2.0.0\n\n* bumps [prompt-choices](https://github.com/enquirer/prompt-choices). A major bump was warranted due to potentially breaking changes in prompt-choices. Please see that library for more details.\n\n## About\n\n### Related projects\n\n* [choices-separator](https://www.npmjs.com/package/choices-separator): Separator for choices arrays in prompts. Based on the Separator from inquirer. | [homepage](https://github.com/enquirer/choices-separator \"Separator for choices arrays in prompts. Based on the Separator from inquirer.\")\n* [enquirer](https://www.npmjs.com/package/enquirer): Intuitive, plugin-based prompt system for node.js. | [homepage](http://enquirer.io \"Intuitive, plugin-based prompt system for node.js.\")\n* [prompt-choices](https://www.npmjs.com/package/prompt-choices): Create an array of multiple choice objects for use in prompts. | [homepage](https://github.com/enquirer/prompt-choices \"Create an array of multiple choice objects for use in prompts.\")\n* [readline-utils](https://www.npmjs.com/package/readline-utils): Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more. | [homepage](https://github.com/enquirer/readline-utils \"Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on July 08, 2017._",
  "readmeFilename": "README.md",
  "_id": "prompt-question@5.0.2",
  "dist": {
    "shasum": "1dd87ffab7b9091a001ea83cf9b7fbe009d2302e"
  },
  "_from": "prompt-question@^5.0.1",
  "_resolved": "https://registry.npmjs.org/prompt-question/-/prompt-question-5.0.2.tgz"
}
