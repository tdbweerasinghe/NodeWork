{
  "name": "readline-ui",
  "description": "Create a readline interface with default settings to use in prompts.",
  "version": "2.2.3",
  "homepage": "https://github.com/enquirer/readline-ui",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "enquirer/readline-ui"
  },
  "bugs": {
    "url": "https://github.com/enquirer/readline-ui/issues"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=4.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "component-emitter": "^1.2.1",
    "debug": "^2.6.8",
    "readline-utils": "^2.2.1",
    "string-width": "^2.0.0"
  },
  "devDependencies": {
    "ansi-cyan": "^0.1.1",
    "gulp-format-md": "^0.1.12",
    "mocha": "^3.4.2"
  },
  "keywords": [
    "answer",
    "answers",
    "ask",
    "checkbox",
    "choice",
    "cli",
    "command",
    "input",
    "inquire",
    "inquirer",
    "interact",
    "interface",
    "list",
    "menu",
    "password",
    "prompt",
    "prompts",
    "question",
    "readline",
    "stdin",
    "stdout",
    "terminal",
    "tty",
    "ui"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    },
    "related": {
      "list": [
        "enquirer",
        "prompt-choices",
        "prompt-question",
        "readline-utils"
      ]
    }
  },
  "readme": "# readline-ui [![NPM version](https://img.shields.io/npm/v/readline-ui.svg?style=flat)](https://www.npmjs.com/package/readline-ui) [![NPM monthly downloads](https://img.shields.io/npm/dm/readline-ui.svg?style=flat)](https://npmjs.org/package/readline-ui) [![NPM total downloads](https://img.shields.io/npm/dt/readline-ui.svg?style=flat)](https://npmjs.org/package/readline-ui) [![Linux Build Status](https://img.shields.io/travis/enquirer/readline-ui.svg?style=flat&label=Travis)](https://travis-ci.org/enquirer/readline-ui)\n\n> Create a readline interface with default settings to use in prompts.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save readline-ui\n```\n\n## Usage\n\n```js\nvar UI = require('readline-ui');\nvar ui = new UI();\n```\n\n## Example\n\n![example](example.gif)\n\nThe following example shows how to create a basic input prompt. This example is a greatly simplified version of [prompt-base](https://github.com/enquirer/prompt-base).\n\n_(This code is also in [example.js](example.js) if you want to run it yourself.)_\n\n```js\nvar cyan = require('ansi-cyan');\nvar UI = require('readline-ui');\nvar ui = new UI();\n\n// first, we need to render the \"question\" \n// to display in the terminal\nvar prompt = '? foo ';\nui.render(prompt);\n\n// on keypress events, re-render the prompt \n// along with user input\nui.on('keypress', function() {\n  ui.render(prompt + ui.rl.line);\n});\n\n// when the \"line\" event is emitted (from the \"enter\" keypress)\n// we `.end()` to unmute the output stream then pause the readline. \nui.on('line', function(answer) {\n  ui.render(prompt + cyan(answer));\n  ui.end();\n  ui.rl.pause();\n  console.log({color: answer});\n});\n```\n\n## API\n\n### [.onKeypress](index.js#L70)\n\nHandle `keypress` events.\n\n**Params**\n\n* `str` **{String}**\n* `key` **{Object}**\n* `returns` **{undefined}**\n\n### [.render](index.js#L82)\n\nRender the prompt with the given `input` and optional `footer`.\n\n**Params**\n\n* `input` **{String}**\n* `footer` **{String}**: (optional)\n* `returns` **{undefined}**\n\n### [.clearLines](index.js#L148)\n\nRemove `n` lines from the bottom of the terminal\n\n**Params**\n\n* `lines` **{Number}**: Number of lines to remove\n\n### [.cacheCursorPos](index.js#L159)\n\nCache the current cursor's column and line position.\n\n* `returns` **{Object}**: UI instance.\n\n### [.restoreCursorPos](index.js#L170)\n\nRestore the cursor position to the cached column and line.\n\n* `returns` **{Object}**: UI instance.\n\n### [.resume](index.js#L180)\n\nResume the input stream.\n\n### [.pause](index.js#L189)\n\nPause the input stream, allowing it to be resumed later if necessary.\n\n### [.close](index.js#L201)\n\nClose the `readline.Interface` instance and relinquish\ncontrol over the input and output streams. Also removes\nevent listeners, and restores/unmutes prompt functionality.\n\n### [.forceClose](index.js#L211)\n\nClose the interface when the keypress is `^C`\n\n### [.finish](index.js#L222)\n\nReturns an \"indentity\" function that calls `.close()`,\nwhich can be used as the final `.then()` function with\npromises.\n\n### [.end](index.js#L237)\n\nDefault method for writing a prompt to the terminal.\nThis can be overridden.\n\n### [.mute](index.js#L260)\n\nMutes the output stream that was used to create the readline interface, and returns a function for unmuting the stream. This is useful in unit tests.\n\n* `returns` **{Function}**\n\n**Example**\n\n```js\n// mute the stream\nvar unmute = ui.mute();\n\n// unmute the stream\nunmute();\n```\n\n### [.log](index.js#L280)\n\nUnmute then write to the output stream that was used\nto create the readline interface, then re-mute the stream.\nUseful for debugging prompts.\n\n## Attribution\n\nInspired by the \"screen manager\" code in Inquirer.\n\n## About\n\n### Related projects\n\n* [enquirer](https://www.npmjs.com/package/enquirer): Intuitive, plugin-based prompt system for node.js. | [homepage](http://enquirer.io \"Intuitive, plugin-based prompt system for node.js.\")\n* [prompt-choices](https://www.npmjs.com/package/prompt-choices): Create an array of multiple choice objects for use in prompts. | [homepage](https://github.com/enquirer/prompt-choices \"Create an array of multiple choice objects for use in prompts.\")\n* [prompt-question](https://www.npmjs.com/package/prompt-question): Question object, used by Enquirer and prompt plugins. | [homepage](https://github.com/enquirer/prompt-question \"Question object, used by Enquirer and prompt plugins.\")\n* [readline-utils](https://www.npmjs.com/package/readline-utils): Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more. | [homepage](https://github.com/enquirer/readline-utils \"Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on June 04, 2017._",
  "readmeFilename": "README.md",
  "_id": "readline-ui@2.2.3",
  "dist": {
    "shasum": "2a9fdb440a5c909ce3915d79a5d807b80db16174"
  },
  "_from": "readline-ui@^2.2.3",
  "_resolved": "https://registry.npmjs.org/readline-ui/-/readline-ui-2.2.3.tgz"
}
