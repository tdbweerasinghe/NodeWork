{
  "name": "readline-utils",
  "description": "Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more.",
  "version": "2.2.3",
  "homepage": "https://github.com/enquirer/readline-utils",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://twitter.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "http://twitter.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "enquirer/readline-utils"
  },
  "bugs": {
    "url": "https://github.com/enquirer/readline-utils/issues"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=4.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "arr-flatten": "^1.1.0",
    "extend-shallow": "^2.0.1",
    "is-buffer": "^1.1.5",
    "is-number": "^3.0.0",
    "is-windows": "^1.0.1",
    "koalas": "^1.0.2",
    "mute-stream": "0.0.7",
    "strip-color": "^0.1.0",
    "window-size": "^1.1.0"
  },
  "devDependencies": {
    "mocha": "^3.3.0",
    "gulp-format-md": "^0.1.12"
  },
  "keywords": [
    "enquirer",
    "readline",
    "utils"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "choices-separator",
        "enquirer",
        "prompt-choices"
      ]
    },
    "lint": {
      "reflinks": true
    }
  },
  "readme": "# readline-utils [![NPM version](https://img.shields.io/npm/v/readline-utils.svg?style=flat)](https://www.npmjs.com/package/readline-utils) [![NPM monthly downloads](https://img.shields.io/npm/dm/readline-utils.svg?style=flat)](https://npmjs.org/package/readline-utils) [![NPM total downloads](https://img.shields.io/npm/dt/readline-utils.svg?style=flat)](https://npmjs.org/package/readline-utils) [![Linux Build Status](https://img.shields.io/travis/enquirer/readline-utils.svg?style=flat&label=Travis)](https://travis-ci.org/enquirer/readline-utils) [![Windows Build Status](https://img.shields.io/appveyor/ci/enquirer/readline-utils.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/enquirer/readline-utils)\n\n> Readline utils, for moving the cursor, clearing lines, creating a readline interface, and more.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save readline-utils\n```\n\n## Usage\n\n```js\nvar utils = require('readline-utils');\n```\n\n## API\n\n### [.createInterface](index.js#L31)\n\nCreate a readline interface with the given `options`.\n\n**Params**\n\n* `options` **{Object}**\n\n### [.up](index.js#L47)\n\nMove cursor up by `n` lines.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Lines up to move. Default is `1`.\n\n### [.down](index.js#L60)\n\nMove cursor down by `n` lines.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Lines down to move. Default is `1`.\n\n### [.left](index.js#L73)\n\nMove cursor left by `n` colums.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Characters to move left. Default is `1`.\n\n### [.right](index.js#L86)\n\nMove cursor right by `n` colums.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Characters to move right. Default is `1`.\n\n### [.move](index.js#L105)\n\nMove cursor up, down, left or right by `1` line.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n\n**Example**\n\n```js\nvar utils = require('readline-utils');\nvar rl = utils.createInterface();\nrl.input.on('keypress', function(str, key) {\n  utils.move(rl, key);\n});\n```\n\n### [.auto](index.js#L125)\n\nCallback function for the `keypress` event, to automatically move cursor up, down, left or right by `1` line.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n\n**Example**\n\n```js\nvar utils = require('readline-utils');\nvar rl = utils.createInterface();\nrl.input.on('keypress', utils.auto(rl));\n```\n\n### [.clearAfter](index.js#L151)\n\nClear `n` lines after the cursor.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Number of lines to clear\n\n### [.clearScreen](index.js#L164)\n\nClear the terminal.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `n` **{Number}**: Number of lines to clear\n\n### [.lastLine](index.js#L177)\n\nGet the last line from the given `str`\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{String}**\n\n### [.height](index.js#L189)\n\nGet the height (rows) of the given `str`\n\n**Params**\n\n* `str` **{String}**\n* `returns` **{Number}**\n\n### [.hideCursor](index.js#L203)\n\nHide the cursor so it doesn't show during a prompt. This is\nuseful for multiple-choice or list prompts, or any prompt\nwhere the user will not be entering input.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `returns` **{Object}**: readline-utils object for chaining\n\n### [.showCursor](index.js#L216)\n\nShow the cursor.\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `returns` **{Object}**: readline-utils object for chaining\n\n### [.close](index.js#L229)\n\nClose the interface, remove event listeners, and restore/unmute prompt functionality\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `returns` **{Object}**: readline-utils object for chaining\n\n### [.forceClose](index.js#L250)\n\nClose the interface when the keypress is `^C`\n\n**Params**\n\n* `rl` **{Readline}**: Readline interface\n* `returns` **{Object}**: readline-utils object for chaining\n\n### [.eraseLines](index.js#L266)\n\nErase `n` lines\n\n**Params**\n\n* `n` **{Number}**\n* `returns` **{String}**: Returns the unicode to erase lines\n\n**Example**\n\n```js\nutils.eraseLines(3);\n```\n\n### [.clearTrailingLines](index.js#L289)\n\nRemove lines from the bottom of the terminal.\n\n**Params**\n\n* `rl` **{Number}**: Readline interface\n* `lines` **{Number}**: Number of lines to remove\n* `height` **{Number}**: Content height\n* `returns` **{Object}**: Returns the readline-utils object for chaining\n\n### [.cursorPosition](index.js#L307)\n\nRemember the cursor position\n\n* `returns` **{Object}**: readline-utils object\n\n### [.restoreCursorPos](index.js#L317)\n\nRestore the cursor position to where it has been previously stored.\n\n* `returns` **{Object}**: readline-utils object\n\n### [.cliWidth](index.js#L333)\n\nGet the width of the terminal\n\n* `returns` **{Number}**: Returns the number of columns.\n\n### [.breakLines](index.js#L348)\n\nBreak lines longer than the cli width so we can normalize the\nnatural line returns behavior accross terminals. (I don't see how\nthis can work consistently. It seems brittle and will probably be replaced\nwith https://github.com/jonschlinkert/word-wrap)\n\n**Params**\n\n* `lines` **{Array}**: Array of lines\n* `width` **{Number}**: Terminal width\n\n### [.forceLineReturn](index.js#L373)\n\nJoins the lines returned from [.breakLines](#breakLines).\n\n**Params**\n\n* `lines` **{Array|String}**: String or array of lines.\n* `width` **{Number}**: Terminal width\n* `returns` **{String}**\n\n### [.normalizeLF](index.js#L392)\n\nEnsure the given `str` ends in a newline.\n\n**Params**\n\n* `str` **{String}**: The input string\n* `returns` **{String}**\n\n**Example**\n\n```js\nconsole.log(utils.normalizeLF('foo'));\n//=> 'foo\\n'\n```\n\n### [.keypress](index.js#L437)\n\nThis module offers the internal \"keypress\" functionality from node-core's `readline` module, for your own programs and modules to use.\n\nThe `keypress` function accepts a readable Stream instance and makes it\nemit \"keypress\" events.\nUsage:\n\n**Params**\n\n* **{Stream}**: stream\n\n**Example**\n\n``` js\nrequire('keypress')(process.stdin);\n\nprocess.stdin.on('keypress', function(ch, key) {\n  console.log(ch, key);\n  if (key.ctrl && key.name === 'c') {\n    process.stdin.pause();\n  }\n});\nproces.stdin.resume();\n```\n\n### [.enableMouse](index.js#L475)\n\nEnables \"mousepress\" events on the _input_ stream. Note\nthat `stream` must be an _output_ stream (i.e. a Writable\nStream instance), usually `process.stdout`.\n\n**Params**\n\n* **{Stream}**: stream writable stream instance\n\n### [.disableMouse](index.js#L488)\n\nDisables \"mousepress\" events from being sent to the _input_\n\nstream. Note that `stream` must be an _output_ stream (i.e.\na Writable Stream instance), usually `process.stdout`.\n\n**Params**\n\n* **{Stream}**: stream writable stream instance\n\n## Attribution\n\nSome of this code was initially borrowed from [Inquirer][].\n\n## About\n\n### Related projects\n\n* [choices-separator](https://www.npmjs.com/package/choices-separator): Separator for choices arrays in prompts. Based on the Separator from inquirer. | [homepage](https://github.com/enquirer/choices-separator \"Separator for choices arrays in prompts. Based on the Separator from inquirer.\")\n* [enquirer](https://www.npmjs.com/package/enquirer): Intuitive, plugin-based prompt system for node.js. Much faster and lighter alternative to Inquirer, with allâ€¦ [more](https://github.com/enquirer/enquirer) | [homepage](https://github.com/enquirer/enquirer \"Intuitive, plugin-based prompt system for node.js. Much faster and lighter alternative to Inquirer, with all the same prompt types and more, but without the bloat.\")\n* [prompt-choices](https://www.npmjs.com/package/prompt-choices): Create an array of multiple choice objects for use in prompts. | [homepage](https://github.com/enquirer/prompt-choices \"Create an array of multiple choice objects for use in prompts.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 41 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 7 | [doowb](https://github.com/doowb) |\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 21, 2017._",
  "readmeFilename": "README.md",
  "_id": "readline-utils@2.2.3",
  "dist": {
    "shasum": "cb42b2ef56e0fa81d5dc36c6a731d2110080f33e"
  },
  "_from": "readline-utils@^2.2.3",
  "_resolved": "https://registry.npmjs.org/readline-utils/-/readline-utils-2.2.3.tgz"
}
