{
  "name": "check-node-version",
  "version": "2.1.0",
  "description": "Check installed versions of node and npm",
  "main": "index.js",
  "bin": {
    "check-node-version": "bin.js"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/parshap/check-node-version.git"
  },
  "keywords": [
    "version",
    "semver"
  ],
  "author": {
    "name": "Parsha Pourkhomami"
  },
  "license": "WTFPL",
  "bugs": {
    "url": "https://github.com/parshap/check-node-version/issues"
  },
  "homepage": "https://github.com/parshap/check-node-version#readme",
  "dependencies": {
    "map-values": "^1.0.1",
    "minimist": "^1.2.0",
    "object-filter": "^1.0.2",
    "object.assign": "^4.0.4",
    "run-parallel": "^1.1.4",
    "semver": "^5.0.3"
  },
  "devDependencies": {
    "tape": "^4.2.2"
  },
  "readme": "# check-node-version\n\nCheck installed versions of `node`, `npm`, and `yarn`.\n\n## Install\n\n[npm: *check-node-version*](https://www.npmjs.com/package/check-node-version)\n\n```\nnpm install check-node-version\n```\n\n## Command Line Usage\n\n```\nSYNOPSIS\n      check-node-version [OPTIONS]\n\nDESCRIPTION\n      check-node-version will check if the current node, npm and yarn\n      versions match the given semver version ranges.\n\n      If the given version is not satisfied, information about\n      installing the needed version is printed and the program exits\n      with an error code.\n\nOPTIONS\n\n      --node VERSION\n            Check that the current node version matches the given semver\n            version range.\n\n      --npm VERSION\n            Check that the current npm version matches the given semver\n            version range.\n\n      --yarn VERSION\n            Check that the current yarn version matches the given semver\n            version range.\n\n      --package\n            Use the \"engines\" key in the current package.json for the\n            semver version ranges.\n\n      -q, --quiet\n            Don't output anything. Exit with an error code if a version\n            is not satisfied, otherwise exit with code 0.\n\n      -h, --help\n            Print this message.\n```\n\n### Examples\n\n#### Get installed versions\n\nWhen no versions are given, the current node, npm, and yarn versions are\nprinted out.\n\n```\n$ check-node-version\nnode: v0.12.7\nnpm: v2.14.10\nyarn: v0.21.3\n$ echo $?\n0\n```\n\n#### Check for `node@4` and `npm@2.14`\n\n```\n$ check-node-version --node 4 --npm 2.14\nnode: v0.12.7\nnpm: v2.14.10\nyarn: v0.21.3\nError: Wanted node version \"4\" (>=4.0.0 <5.0.0)\nTo install node, run `nvm install 4` or check https://nodejs.org/\n$ echo $?\n1\n```\n\n#### Check for `node@4` and `npm@2.14`, `yarn` not installed\n\n```\n$ check-node-version --node 4 --npm 2.14\nnode: v0.12.7\nnpm: v2.14.10\nyarn: not installed\nError: Wanted node version \"4\" (>=4.0.0 <5.0.0)\nTo install node, run `nvm install 4` or check https://nodejs.org/\n$ echo $?\n1\n```\n\n#### Use with a `.nvmrc` file\n\n```\n$ check-node-version --node $(cat .nvmrc) --npm 2.14\n```\n\n#### Use with `npm test`\n\n```json\n{\n  \"name\": \"my-package\",\n  \"devDependencies\": {\n    \"check-node-version\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"check-node-version --node '>= 4.2.3' && node my-tests.js\"\n  }\n}\n```\n\n## API Usage\n\nThis module can also be used programmatically from node. See `index.js`\nand `test.js` for more information.\n",
  "readmeFilename": "README.md",
  "_id": "check-node-version@2.1.0",
  "dist": {
    "shasum": "d2cd91d02e1471ad487fefacc9677b36cfe65558"
  },
  "_from": "check-node-version@",
  "_resolved": "http://registry.npmjs.org/check-node-version/-/check-node-version-2.1.0.tgz"
}
