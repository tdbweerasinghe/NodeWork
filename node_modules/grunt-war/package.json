{
  "name": "grunt-war",
  "description": "Pure JS implementation for generating a WAR file.",
  "version": "0.5.1",
  "homepage": "https://github.com/MorrisLLC/grunt-war",
  "author": {
    "name": "Robert Morris",
    "email": "wibobm@gmail.com"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.8.0"
  },
  "maintainers": [
    {
      "name": "Bob Morris",
      "email": "wibobm+grunt@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/MorrisLLC/grunt-war"
  },
  "bugs": {
    "url": "https://github.com/MorrisLLC/grunt-war/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/MorrisLLC/grunt-war/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "archiver": ">= 0.12.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": ">= 1.0.0",
    "grunt-contrib-clean": ">= 1.0.0",
    "grunt-contrib-nodeunit": ">= 1.0.0"
  },
  "keywords": [
    "gruntplugin",
    "maven",
    "war",
    "maven-war-plugin"
  ],
  "readme": "# grunt-war\n\n> Pure JavaScript implementation for creating a WAR of your project for deployment on a JVM servlet container. Enjoy!\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\n\n```shell\nnpm install grunt-war --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-war');\n```\n\n[Then sip on some @AnodyneCoffee.](https://anodynecoffee.com)\n\n[Are you on Strava?](https://www.strava.com/athletes/7832063)\n\n[Do you enjoy YouTube?](http://www.youtube.com/c/BobMorrisWI)\n\nEnjoy!\n\n## The \"war\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `war` to the data object passed into `grunt.initConfig()`.\n\nThe simplest usage might look simiiar to the following:\n\n```js\ngrunt.loadNpmTasks('grunt-war');\n\ngrunt.initConfig({\n\n      /*\n       * Build a WAR (web archive) without Maven or the JVM installed.\n       */\n      war: {\n        target: {\n          options: {\n            war_dist_folder: '<%= build_dir %>',    /* Folder where to generate the WAR. */\n            war_name: 'webmagic'                    /* The name fo the WAR file (.war will be the extension) */\n          },\n          files: [\n            {\n              expand: true,\n              cwd: '<%= build_dir %>',\n              src: ['**'],\n              dest: ''\n            }\n          ]\n        }\n      }\n});\n```\n\nIf your project does not include a web.xml then grunt-war can generate one for you.  This is one option below:\n\n```js\ngrunt.loadNpmTasks('grunt-war');\n\ngrunt.initConfig({\n\n      /*\n       * Build a WAR (web archive) without Maven or the JVM installed.\n       */\n      war: {\n        target: {\n          options: {\n            war_dist_folder: '<%= build_dir %>',\n            war_name: 'grunt-magic',\n            webxml_welcome: 'index.html',\n            webxml_display_name: 'Grunt WAR',\n            webxml_mime_mapping: [ { extension: 'woff', mime_type: 'application/font-woff' } ]\n          },\n          files: [\n            {\n              expand: true,\n              cwd: '<%= build_dir %>',\n              src: ['**'],\n              dest: ''\n            }\n          ]\n        }\n      }\n});\n```\n\nA complete and very simple Grunt file example will look like the following.\n\n```js\n// Save this snippet as grunt-war.js and run with  \"grunt --gruntfile grunt-war.js war\" at the command line.\n// Assumes simple layout:\n// -project\n// --build  (The folder where the generated grunt-magic.war file will go)\n// --src    (all the source code, html, etc)\n// --- index.html (The file name must match up with the webxml_welcome: property below)\nmodule.exports = function ( grunt ) {\n    grunt.loadNpmTasks( 'grunt-war' );\n\n    var taskConfig = {\n        war: {\n            target: {\n                options: {\n                    war_verbose: true,\n                    war_dist_folder: 'build',           // Folder path seperator added at runtime.\n                    war_name: 'grunt-magic',            // .war will be appended if omitted\n                    webxml_welcome: 'index.html',\n                    webxml_display_name: 'Grunt WAR'\n                },\n                files: [\n                    {\n                        expand: true,\n                        cwd: 'src',\n                        src: ['**'],\n                        dest: ''\n                    }\n                ]\n            }\n        }\n    };\n\n    grunt.initConfig( taskConfig );\n};\n```\n\n### Options\n\n#### options.war_dist_folder\nType: `'string'`\nDefault value: `'test'`\n\nThis is the folder that the war will be placed in. This folder has to exist before this task is run.\n\n#### options.war_name\nType: `'string'`\nDefault value: `'grunt'`\n\n#### options.war_extras\nType: `'Array'`\nDefault value: `[]`\n\nA list of files and folders entries that are to be included in the war. Each object in the array has\nkeys `filename` and `data` example: `{ filename: 'name_of_file.ext', data: file_data }`.  If the key `data`\nis omitted then an empty folder called `filename` will be added to the WAR. The value of key  `data` can\neither be a `string` or a function that returns a `string`.\n\n    war_extras: [ {filename: 'grunt-war-credits.txt', data: 'This line will appear in the file!\\n'} ]\n\n#### options.war_verbose\nType: `'boolean'`\nDefault value: `false`\n\nLogs progress to the grunt console log.\n\n#### options.war_compression\nType: `'string'`\nDefault value: `'DEFLATE'`\n\nCompress ('DEFLATE') or leave uncompressed ('NONE').\n\n#### options.webxml\nType: `'Function'`\nDefault value: Normally omitted. Only provide if you want absolute control over the format and contents of the web.xml.\nIf you specify this option the other `options.webxml_XXX` will have no effect if specified.\n\nExample 1\n\n````js\n     /* Return a string that will become the complete contents of the web.xml */\n     webxml: function (opts) { \n                return 'string containing contents of web.xml'; \n             },\n````\n\nExample 2\n\n````js\n     /* Return the contents of a file which will become the web.xml */\n     webxml: function (opts) { \n                var fs = require('fs'); \n                return fs.readFileSync(pathToFileWithContentsOfHardCodedWebXML, 'binary'); \n             },\n````\n\n#### options.webxml_welcome\nType: `'string'`\nDefault value: `'index.html'`\n\n#### options.webxml_display_name\nType: `'string'`\nDefault value: `'Grunt WAR'`\n\n#### options.webxml_mime_mapping\nType: `'Array'`\nDefault value: `[]`\n\nAn array of objects with properties `extension` and `mime_type`.\n\n#### options.webxml_webapp_extras\nType: `'Array'`\nDefault value: `[]`\n\nAn array of objects that are either `'string'` or `'function'` that return `'string'`.  These entries are\nincluded directly into the generated web.xml.\n    \n    webxml_webapp_extras: [\n        '<login-config />\\n',\n        '<session-config>\\n<session-timeout>\\n30\\n</session-timeout>\\n</session-config>\\n'\n    ]\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n#### 0.5.1\n* Sample webxml_webapp_extras. Thanks to @pthaden\n\n#### 0.5.0\n* Fixed issue when using NPM3 that grunt-war dependencies had to be manually installed. Thanks to @bradrox\n\n#### 0.4.9\n* Just a version bump of dependencies used internally. \n\n#### 0.4.8\n* Fixed issue with \"normalize\" creating folders.  Thanks to rbalmf and laszlogmenyhart.\n\n#### 0.4.7\n* Fixed issue with \"extras\" that was not consistent with EMFILE fix.  Thanks to laszlogmenyhart.\n\n#### 0.4.6\n* Fixed EMFILE exception (no many open files).\n\n#### 0.4.5\n* Fixed a second WEB-INF/web.xml being added on windows.\n\n#### 0.4.4\n* Bug fix that prevented old wars from being deleted\n\n#### 0.4.3\n* Update to package.json for grunt-war. \n\n#### 0.4.2\n* Fixed bad archive entry names. (mmaday)\n\n#### 0.4.1\n* Documenation update.\n\n#### 0.4.0\n* This build uses streams to build the WAR and can process vastly larger projects (huge) than in prior versions. This should fix the \"Out of memory error - FATAL ERROR\". that has been reported by a few individuals. \n\n#### 0.3.4\n* If the project being processed provides a top level WEB-INF/web.xml then grunt-war will use it in lieu of generating one automatically and will ignore the webxml options configured on the grunt-war task. \n\n#### 0.3.3\n* Removed a project dependency (not actively maintained) to try and address reports of a out-of-memory exception while generating a war file from 2 users.\n* Grammer corrections - Thank you Tim Russell (trussell314).\n\n#### 0.3.2\n* If the war_dist_folder does not already exist then grunt-war will create it.  This saves the pain of adding this check before calling grunt-war. (skray)\n\n#### 0.3.1 \n* Added `options.webxml` so that you may provide the raw contents of the web.xml when necessary. Requested by MartinDoyleUK.\n\n````js\n     /* Example of how to return the contents of a file which will become the web.xml */\n     webxml: function (opts) { \n                var fs = require('fs'); \n                return fs.readFileSync(pathToFileWithContentsOfHardCodedWebXML, 'binary'); \n             },\n````\n\n#### 0.3.0 (Breaking changes)\n* This release allows for more flexible output paths inside the war bundle using Grunt's built-in dest write instead of the prior custom and less flexible rewrites. If you want the same behavior as in prior releases that did not depend on the 'dest' configuration then you must modify the task to something similiar to the following snippet.  (shcarrico)\n\n````js\n    ...\n    war: {\n      target: {\n        options: { ... },\n        files: [\n            {\n              expand: true,\n              cwd: '<%= build_dir %>',\n              src: ['**'],\n              dest: ''  \n            }\n        ]\n      }\n    },\n    ...\n````\n\n#### 0.2.7\n* Fixed the inclusion of source files defined in previous WAR task configurations for all future WAR tasks. Example: a war.foo task includes dist/foo in foo.war, and a war.bar task includes dist/bar in bar.war. bar.war would include both dist/bar and the previously added dist/foo. (jbenner)\n\n#### 0.2.6\n\n* Fixed grunt-war encoding text incorrectly. Example: 'Količina' and 'Osveži' would get encoded as 'KoliÄina' and 'OsveÅ¾i'. (sobrle)\n\n#### 0.2.5\n\n* Updated peerDependencies to include node-zip. (@augier)\n\n#### 0.2.4\n\n* Now deletes `options.war_name` from `options.war_dist_folder` before trying to generate a new `war` file.\n\n#### 0.2.3\n\n* Fixed file names being trimmed when included in war. (@augier)\n\n#### 0.2.1\n\n* Fixed deployment issue resulting from using wrong option when generating webapp tag.\n\n#### 0.2.0\n\n* Renamed `options.war_filename` to `options.war_name`.\n* Added `options.war_extras`\n* Added `options.webxml_webapp_extras`.\n\n#### 0.1.4 Initial\n",
  "readmeFilename": "README.md",
  "_id": "grunt-war@0.5.1",
  "_from": "grunt-war@"
}
